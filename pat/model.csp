/*
This file defines the actions that can be taken by the rescue robot.
*/

// include current world interpretation and definitions
#include "world.csp";
#include "definitions.csp";

// condition definitions
#define DepthLimitCond steps < maxSteps;

// condition definitions for movement
#define MoveUpCond (xpos != 0) && (world[xpos-1][ypos] != Hostile);
#define MoveDownCond (xpos != Rows - 1) && (world[xpos+1][ypos] != Hostile);
#define MoveLeftCond (ypos != 0) && (world[xpos][ypos-1] != Hostile);
#define MoveRightCond (ypos != Cols - 1) && (world[xpos][ypos+1] != Hostile);

// variables
hvar steps = 0;
hvar surveyed = 0;

// Process to update cells within the given range
UpdateSeenCells() = 
{
	var dx = -vision;
    while (dx <= vision)
    {
        var newX = xpos + dx;
        if (newX >= 0 && newX < Rows)
        {
        	var dy = -vision;
            while (dy <= vision)
            {
                var newY = ypos + dy;
                if (newY >= 0 && newY < Cols && world[newX][newY] == Unseen)
                {
                    world[newX][newY] = Seen; // Mark the cell as seen
                    surveyed++;
                }
            dy++;
            }
        }
    dx++;
    }
} -> Skip;

// base movement tasks
MoveUp() = [MoveUpCond]moveup{world[xpos][ypos] = Hostile; xpos = xpos - 1; steps++;} -> UpdateSeenCells;
MoveDown() = [MoveDownCond]movedown{world[xpos][ypos] = Hostile; xpos = xpos + 1; steps++;} -> UpdateSeenCells;
MoveLeft() = [MoveLeftCond]moveleft{world[xpos][ypos] = Hostile; ypos = ypos - 1; steps++;} -> UpdateSeenCells;
MoveRight() = [MoveRightCond]moveright{world[xpos][ypos] = Hostile; ypos = ypos + 1; steps++;} -> UpdateSeenCells;

// compound movement task
Move() = [DepthLimitCond] (MoveUp() [] MoveDown() [] MoveLeft() [] MoveRight());