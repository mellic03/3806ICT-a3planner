/*
This file defines the actions that can be taken by the rescue robot.
*/

// include current world interpretation and definitions
#include "world.csp";
#include "definitions.csp";

// condition definitions
#define DepthLimitCond steps < maxSteps;

// conditions to check if cell is visited
#define UpVisited (|| i:{0..maxSteps - 1}@(visited[i][0] == xpos - 1 && visited[i][1] == ypos));
#define DownVisited (|| i:{0..maxSteps - 1}@(visited[i][0] == xpos + 1 && visited[i][1] == ypos));
#define LeftVisited (|| i:{0..maxSteps - 1}@(visited[i][0] == xpos && visited[i][1] == ypos - 1));
#define RightVisited (|| i:{0..maxSteps - 1}@(visited[i][0] == xpos && visited[i][1] == ypos + 1));

// condition definitions for movement
#define MoveUpCond (xpos != 0) && (world[xpos-1][ypos] != Hostile) && !UpVisited;
#define MoveDownCond (xpos != Rows - 1) && (world[xpos+1][ypos] != Hostile) && !DownVisited;
#define MoveLeftCond (ypos != 0) && (world[xpos][ypos-1] != Hostile) && !LeftVisited;
#define MoveRightCond (ypos != Cols - 1) && (world[xpos][ypos+1] != Hostile) && !RightVisited;

// variables
var steps = 0;
var surveyed = 0;
var visited[maxSteps][2] = [-1(2 * maxSteps)];

// Process to update cells within the given range
UpdateSeenCells() = 
{
	var dx = -vision;
    while (dx <= vision)
    {
        var newX = xpos + dx;
        if (newX >= 0 && newX < Rows)
        {
        	var dy = -vision;
            while (dy <= vision)
            {
                var newY = ypos + dy;
                if (newY >= 0 && newY < Cols && world[newX][newY] == 0)
                {
                    world[newX][newY] = 1; // Mark the cell as seen
                    surveyed++;
                }
            dy++;
            }
        }
    dx++;
    }
} -> Skip;

// base movement tasks
MoveUp() = [MoveUpCond]moveup{visited[steps][0] = xpos; visited[steps][1] = ypos; xpos = xpos - 1; steps++;} -> UpdateSeenCells;
MoveDown() = [MoveDownCond]movedown{visited[steps][0] = xpos; visited[steps][1] = ypos; xpos = xpos + 1; steps++;} -> UpdateSeenCells;
MoveLeft() = [MoveLeftCond]moveleft{visited[steps][0] = xpos; visited[steps][1] = ypos; ypos = ypos - 1; steps++;} -> UpdateSeenCells;
MoveRight() = [MoveRightCond]moveright{visited[steps][0] = xpos; visited[steps][1] = ypos; ypos = ypos + 1; steps++;} -> UpdateSeenCells;

// compound movement task
Move() = MoveUp() [] MoveDown() [] MoveLeft() [] MoveRight();

// Survery the map
Survey() = Move(); Survey();
